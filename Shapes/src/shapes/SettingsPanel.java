/*
 * SettingsPanel.java - JPanel which controls game settings
 */

/**
 * Not for duplication or distribution without the permission of the author
 * @author  - Lawrence Schmid
 */

package shapes;

import javax.swing.event.*;
import javax.swing.*;

public class SettingsPanel extends javax.swing.JPanel {

    /**
     * Construct SettingsPanel 
     */    
    public SettingsPanel() {
        initComponents();

        sldSpeed.addChangeListener(new SliderListener());
        sldBackground.addChangeListener(new SliderListener());
        sldSize.addChangeListener(new SliderListener());
        sldShapes.addChangeListener(new SliderListener());
        sldTime.addChangeListener(new SliderListener());
        sldZoom.addChangeListener(new SliderListener());
        sldSize.setValue(300);
 
    }

    /**
     * Set the value of the map visible check box
     * @param visible Check box value   
     */     
    public void setMapVisibleCheck(boolean visible)
    {
        chkMap.setSelected(false);
    }
    
    /**
     * Set the value of zoom slider
     * @param zoom Slider value   
     */     
    public void setZoomLevel(int zoom)
    {
        sldZoom.setValue(sldZoom.getValue()+zoom);
        
    }        
              
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        chkSound = new javax.swing.JCheckBox();
        chkSound.setSelected(true);
        btnExit = new javax.swing.JButton();
        lblSettings = new javax.swing.JLabel();
        lblSpeed = new javax.swing.JLabel();
        chkBackground = new javax.swing.JCheckBox();
        chkBackground.setSelected(true);
        chkRotations = new javax.swing.JCheckBox();
        chkRotations.setSelected(true);
        sldSpeed = new javax.swing.JSlider();
        lblBrushWidth = new javax.swing.JLabel();
        sldBackground = new javax.swing.JSlider();
        lblPanelSize = new javax.swing.JLabel();
        sldSize = new javax.swing.JSlider();
        lblShapes = new javax.swing.JLabel();
        sldShapes = new javax.swing.JSlider();
        chkPoints = new javax.swing.JCheckBox();
        chkPoints.setSelected(true);
        btnReset = new javax.swing.JButton();
        lblTime = new javax.swing.JLabel();
        sldTime = new javax.swing.JSlider();
        chkMap = new javax.swing.JCheckBox();
        chkMap.setSelected(true);
        jLabel1 = new javax.swing.JLabel();
        sldZoom = new javax.swing.JSlider();
        lblBrushWidth1 = new javax.swing.JLabel();

        chkSound.setText("Sound");
        chkSound.setFocusable(false);
        chkSound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSoundActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Tahoma", 1, 10));
        btnExit.setText("Exit");
        btnExit.setFocusable(false);
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        lblSpeed.setText("Speed");

        chkBackground.setText("Scrolling");
        chkBackground.setFocusable(false);
        chkBackground.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBackgroundActionPerformed(evt);
            }
        });

        chkRotations.setFocusable(false);
        chkRotations.setLabel("Rotations");
        chkRotations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRotationsActionPerformed(evt);
            }
        });

        sldSpeed.setMaximum(10);
        sldSpeed.setMinimum(1);
        sldSpeed.setValue(4);
        sldSpeed.setFocusable(false);
        sldSpeed.setName("sldSpeed"); // NOI18N
        sldSpeed.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                sldSpeedCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        sldSpeed.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sldSpeedPropertyChange(evt);
            }
        });

        lblBrushWidth.setText("Background");

        sldBackground.setMaximum(5);
        sldBackground.setValue(1);
        sldBackground.setFocusable(false);
        sldBackground.setName("sldBackground"); // NOI18N

        lblPanelSize.setText("Size");

        sldSize.setMajorTickSpacing(10);
        sldSize.setMaximum(700);
        sldSize.setMinimum(512);
        sldSize.setMinorTickSpacing(10);
        sldSize.setSnapToTicks(true);
        sldSize.setFocusable(false);
        sldSize.setName("sldSize"); // NOI18N

        lblShapes.setText("Shapes");

        sldShapes.setMajorTickSpacing(10);
        sldShapes.setMaximum(50);
        sldShapes.setMinorTickSpacing(10);
        sldShapes.setSnapToTicks(true);
        sldShapes.setValue(25);
        sldShapes.setFocusable(false);
        sldShapes.setName("sldShapes"); // NOI18N

        chkPoints.setText("Points");
        chkPoints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPointsActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Tahoma", 1, 10));
        btnReset.setText("Reset");
        btnReset.setFocusable(false);
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        lblTime.setText("Time");

        sldTime.setMajorTickSpacing(10);
        sldTime.setMaximum(60);
        sldTime.setMinimum(1);
        sldTime.setMinorTickSpacing(10);
        sldTime.setSnapToTicks(true);
        sldTime.setValue(20);
        sldTime.setFocusable(false);
        sldTime.setName("sldTime"); // NOI18N

        chkMap.setText("Map");
        chkMap.setFocusable(false);
        chkMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMapActionPerformed(evt);
            }
        });

        jLabel1.setText("Settings");

        sldZoom.setMaximum(512);
        sldZoom.setMinimum(50);
        sldZoom.setFocusable(false);
        sldZoom.setName("sldZoom"); // NOI18N

        lblBrushWidth1.setText("Zoom");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(chkMap)
                    .addComponent(chkBackground)
                    .addComponent(chkPoints)
                    .addComponent(chkSound)
                    .addComponent(chkRotations)
                    .addComponent(lblBrushWidth1)
                    .addComponent(sldZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblShapes)
                    .addComponent(sldShapes, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sldTime, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTime)
                    .addComponent(lblBrushWidth)
                    .addComponent(sldBackground, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sldSize, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPanelSize)
                    .addComponent(lblSpeed)
                    .addComponent(sldSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSettings)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSettings)
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkSound)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkBackground, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkRotations)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkPoints)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkMap)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSpeed)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sldSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPanelSize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sldSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblBrushWidth1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sldZoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblShapes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sldShapes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sldTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblBrushWidth)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sldBackground, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExit)
                    .addComponent(btnReset))
                .addContainerGap())
        );
    }// </editor-fold>
    private void chkSoundActionPerformed(java.awt.event.ActionEvent evt) {                                         
       Settings.SOUND = chkSound.isSelected();
}                                        
    private void chkBackgroundActionPerformed(java.awt.event.ActionEvent evt) {                                              
        Settings.SCROLLING = chkBackground.isSelected();
}                                             
    private void sldSpeedCaretPositionChanged(java.awt.event.InputMethodEvent evt) {                                              

}                                             
    private void sldSpeedPropertyChange(java.beans.PropertyChangeEvent evt) {                                        
 
    }                                       
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {                                        
        System.exit(0);
    }                                       
    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {                                         
        Main.frame.gPanel.reset();

}                                        
    private void chkMapActionPerformed(java.awt.event.ActionEvent evt) {                                       
        Settings.MAP = chkMap.isSelected();
        Main.map.setVisible(Settings.MAP);
}                                      
    private void chkPointsActionPerformed(java.awt.event.ActionEvent evt) {                                          
        Settings.SCORE = chkPoints.isSelected();
}                                         
    private void chkRotationsActionPerformed(java.awt.event.ActionEvent evt) {                                             
        Settings.ROTATE = chkRotations.isSelected();
    }                                            
    // Variables declaration - do not modify
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnReset;
    private javax.swing.JCheckBox chkBackground;
    private javax.swing.JCheckBox chkMap;
    private javax.swing.JCheckBox chkPoints;
    private javax.swing.JCheckBox chkRotations;
    private javax.swing.JCheckBox chkSound;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblBrushWidth;
    private javax.swing.JLabel lblBrushWidth1;
    private javax.swing.JLabel lblPanelSize;
    private javax.swing.JLabel lblSettings;
    private javax.swing.JLabel lblShapes;
    private javax.swing.JLabel lblSpeed;
    private javax.swing.JLabel lblTime;
    private javax.swing.JSlider sldBackground;
    private javax.swing.JSlider sldShapes;
    private javax.swing.JSlider sldSize;
    private javax.swing.JSlider sldSpeed;
    private javax.swing.JSlider sldTime;
    private javax.swing.JSlider sldZoom;
    // End of variables declaration
    //Setup slider action listener
    class SliderListener implements ChangeListener {

        public void stateChanged(ChangeEvent e) {
            JSlider source = (JSlider) e.getSource();
            String command = source.getName(); //get the name of the control

            if (command.equals("sldSpeed")) {
                Settings.SPEED = source.getValue();
                Main.frame.gPanel.setSpeed();
            }

            if (command.equals("sldBackground")) {
                Main.frame.gPanel.setBackground(source.getValue());       
            }
            if (command.equals("sldZoom")) {
                Settings.VIEW_PORT = 50 + (Settings.PANEL_W -source.getValue());
                Main.frame.gPanel.setImg();
                //Main.frame.validate();
               // Main.frame.setSize(Settings.VIEW_PORT + Main.frame.spanel.getWidth() + 10, Settings.VIEW_PORT + 30);
            }
            if (command.equals("sldSize")) {
                Settings.PANEL_W = source.getValue();
                Settings.PANEL_H = source.getValue();
                Main.map.mPanel.resized = true;
                sldZoom.setMaximum(source.getValue());
                sldZoom.setValue(50 + (Settings.PANEL_W -source.getValue()));
            }
            if (command.equals("sldShapes")) {
                Settings.SHAPES = source.getValue();
                Main.frame.gPanel.createRandomShapes();
            }

            if (command.equals("sldTime")) {
                Settings.TIME_LIMIT = source.getValue();
                Main.frame.gPanel.resetTimer();
            }



        }
    }
}


